.decl byVar(v0:symbol, v1:__SYS_TYPE__AP)
.decl byFld(v0:symbol, v1:symbol, v2:__SYS_TYPE__AP)
.decl byLen(v0:number, v1:__SYS_TYPE__Shape)
.decl byName(v0:symbol, v1:__SYS_TYPE__Shape)
.decl byPoints(v0:number, v1:number, v2:__SYS_TYPE__Shape)
.decl AP_byStr(v0:symbol, v1:__SYS_TYPE__AP)
.decl Shape_byStr(v0:symbol, v1:__SYS_TYPE__Shape)
.decl Ble(v0:__SYS_TYPE__AP, v1:symbol)
.decl Foo(v0:__SYS_TYPE__AP, v1:symbol)
.decl Baz(v0:symbol)
.decl BarBaz(v0:__SYS_TYPE__AP)
.decl Foo2(v0:__SYS_TYPE__AP)
.decl Baz2(v0:symbol, v1:symbol)
.decl Planned(v0:symbol)
.decl FooBer(v0:number, v1:__SYS_TYPE__Shape, v2:number, v3:__SYS_TYPE__Shape)
.decl Pred1(v0:number, v1:number)
.decl Pred2(v0:number, v1:number, v2:number)
.decl AP(v0:__SYS_TYPE__AP)
.decl AP2(v0:__SYS_TYPE__AP)
.decl Shape(v0:__SYS_TYPE__Shape)
.type __SYS_TYPE_byVar = [v0:symbol]
.type __SYS_TYPE_byFld = [v0:symbol, v1:symbol]
.type __SYS_TYPE_AP_byStr = [v0:symbol]
.type __SYS_TYPE__AP = [v0:__SYS_TYPE_byVar, v1:__SYS_TYPE_byFld, v2:__SYS_TYPE_AP_byStr]
.type __SYS_TYPE_byLen = [v0:number]
.type __SYS_TYPE_byName = [v0:symbol]
.type __SYS_TYPE_byPoints = [v0:number, v1:number]
.type __SYS_TYPE_Shape_byStr = [v0:symbol]
.type __SYS_TYPE__Shape = [v0:__SYS_TYPE_byLen, v1:__SYS_TYPE_byName, v2:__SYS_TYPE_byPoints, v3:__SYS_TYPE_Shape_byStr]
byVar("abc", [nil, nil, ["abc"]]), AP([nil, nil, ["abc"]]), Ble([nil, nil, ["abc"]], "abc").
byVar("abc", [nil, nil, ["abc"]]), AP([nil, nil, ["abc"]]), Foo([nil, nil, ["abc"]], "abc"), Baz("abc"), BarBaz([nil, nil, ["abc"]]).
byFld("x2", "f1", [nil, nil, ["x2", "f1"]]), AP2([nil, nil, ["x2", "f1"]]), Foo2([nil, nil, ["x2", "f1"]]), Baz2("f1", "x2").
Planned(x):- Foo(_, x), Baz(x).
.plan 1:(1,2)
byLen(42, [nil, nil, nil, [42]]), Shape([nil, nil, nil, [42]]), byLen(10, [nil, nil, nil, [10]]), Shape([nil, nil, nil, [10]]), FooBer(42, [nil, nil, nil, [42]], 10, [nil, nil, nil, [10]]).
Pred1(10 + 20, 10).
Pred2(x, t, x + t):- Pred1(x, x), x = 10 + t, Pred1(t, t).
AP(v0):- AP2(v0).
