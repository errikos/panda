.decl cons_A(v0:symbol, v1:__SYS_TYPE__Animal)
.decl Foo(v0:__SYS_TYPE__Animal, v1:symbol)
.decl Animal_byStr(v0:symbol, v1:__SYS_TYPE__Animal)
.decl Foo2(v0:__SYS_TYPE__Animal, v1:symbol)
.decl Bar(v0:symbol, v1:__SYS_TYPE__Animal)
.decl Ble(v0:symbol, v1:__SYS_TYPE__Animal)
.decl Baz(v0:__SYS_TYPE__Animal)
.decl FooBar(v0:symbol, v1:__SYS_TYPE__Animal)
.decl FooBar2(v0:symbol, v1:__SYS_TYPE__Animal)
.decl Part1(v0:symbol, v1:__SYS_TYPE__Animal)
.decl Part2(v0:__SYS_TYPE__Animal, v1:symbol)
.decl BarI(v0:number)
.decl BarII(v0:number)
.decl Animal(v0:__SYS_TYPE__Animal)
.decl Cat(v0:__SYS_TYPE__Animal)
.type __SYS_TYPE_cons_A = [v0:symbol]
.type __SYS_TYPE_Animal_byStr = [v0:symbol]
.type __SYS_TYPE__Animal = [v0:__SYS_TYPE_cons_A, v1:__SYS_TYPE_Animal_byStr]
cons_A("bird", [nil, ["bird"]]), Animal([nil, ["bird"]]), Foo([nil, ["bird"]], "bird").
cons_A("bird", [nil, ["bird"]]), Animal([nil, ["bird"]]), Foo2([nil, ["bird"]], "bird").
cons_A("kitty", [nil, ["kitty"]]), Cat([nil, ["kitty"]]), Bar("kitty", [nil, ["kitty"]]).
Ble(a, b):- cons_A(a, b).
FooBar(y, z):- Ble(y, z), Baz(z).
FooBar2(x, y):- Bar(x, y).
Baz(x):- Foo(x, _).
Baz(x):- Bar(_, x).
FooBar2("foo", y):- Baz(y).
Part1(x, y):- Bar(x, y).
Part2(x, y):- Part1(y, x).
Part1(x, y):- Foo2(y, x).
BarI(1).
BarII(1).
Animal(v0):- Cat(v0).
