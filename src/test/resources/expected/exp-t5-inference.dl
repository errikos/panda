.decl cons_A(v0:symbol, v1:__SYS_TYPE__Animal) // string x Animal
.decl Foo(v0:__SYS_TYPE__Animal, v1:symbol) // Animal x string
.decl Animal_byStr(v0:symbol, v1:__SYS_TYPE__Animal) // string x Animal
.decl Foo2(v0:__SYS_TYPE__Animal, v1:symbol) // Animal x string
.decl Bar(v0:symbol, v1:__SYS_TYPE__Animal) // string x Cat
.decl Ble(v0:symbol, v1:__SYS_TYPE__Animal) // string x Animal
.decl Baz(v0:__SYS_TYPE__Animal) // Animal
.decl FooBar(v0:symbol, v1:__SYS_TYPE__Animal) // string x Animal
.decl FooBar2(v0:symbol, v1:__SYS_TYPE__Animal) // string x Animal
.decl Part1(v0:symbol, v1:__SYS_TYPE__Animal) // string x Animal
.decl Part2(v0:__SYS_TYPE__Animal, v1:symbol) // Animal x string
.decl BarI(v0:number) // int
.decl BarII(v0:number) // int
.decl Animal(v0:__SYS_TYPE__Animal) // Animal
.decl Cat(v0:__SYS_TYPE__Animal) // Cat
.type __SYS_TYPE_cons_A = [v0:symbol]
.type __SYS_TYPE_Animal_byStr = [v0:symbol]
.type __SYS_TYPE__Animal = [v0:__SYS_TYPE_cons_A, v1:__SYS_TYPE_Animal_byStr]
cons_A("bird", [["bird"], nil]), Animal([["bird"], nil]), Foo([["bird"], nil], "bird") :- 1=1.
cons_A("bird", [["bird"], nil]), Animal([["bird"], nil]), Foo2([["bird"], nil], "bird") :- 1=1.
cons_A("kitty", [["kitty"], nil]), Cat([["kitty"], nil]), Bar("kitty", [["kitty"], nil]) :- 1=1.
Ble(a, b) :- cons_A(a, b).
FooBar(y, z) :- Ble(y, z), Baz(z).
FooBar2(x, y) :- Bar(x, y).
Baz(x) :- Foo(x, _).
Baz(x) :- Bar(_, x).
FooBar2("foo", y) :- Baz(y).
Part1(x, y) :- Bar(x, y).
Part2(x, y) :- Part1(y, x).
Part1(x, y) :- Foo2(y, x).
BarI(1).
BarII(1).
Animal(v0) :- Cat(v0).
